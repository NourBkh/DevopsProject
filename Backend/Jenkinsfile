pipeline {
    agent any

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_USERNAME = credentials('devops-pipeline') // Use credentials from Jenkins
        DOCKER_PASSWORD = credentials('devops-pipeline') // Use credentials from Jenkins
        IMAGE_NAME = 'nourbkh/devops-backend' // Docker Hub repository name
        IMAGE_TAG = 'nourbenkhairia-5arctic3-g4-devops' // Tag for the image
        SONAR_SCANNER_HOME = tool 'SonarQube Scanner' // Sonar Scanner tool configured in Jenkins
        SONAR_PROJECT_KEY = 'devops-backend' // Project key for SonarQube
        SONAR_TOKEN = credentials('sonarqube-token') // Make sure the ID matches your Jenkins credential
        NEXUS_URL = 'http://localhost:8081/repository/my-maven-repo/' // Correct Nexus repository URL
        NEXUS_CREDENTIALS = credentials('nexus-credentials') // Credentials for Nexus repo in Jenkins
        MAVEN_REPO_ID = 'nexus' // Nexus repository ID in Maven settings.xml
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'nourbenkhairia_5Arctic3_G4',
                    url: 'https://github.com/devopsproject976/5ArcTIC_G4_devops.git',
                    credentialsId: 'devops-pipeline'
            }
        }

        stage('Start MySQL Container') {
            steps {
                script {
                    sh 'docker rm -f mysql-test || true' // Remove existing container if it exists
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7' // Start new MySQL container
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend') {
                    sh 'mvn clean package' // Run Maven build
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    sh 'mvn test' // Run tests with Maven
                }
            }
        }

        stage('JaCoCo Report') {
            steps {
                dir('Backend') {
                    sh 'mvn jacoco:report' // Generate the JaCoCo report
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Backend') {
                    withSonarQubeEnv('SonarQube') {
                        sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner " +
                            "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                            "-Dsonar.sources=src " +
                            "-Dsonar.java.binaries=target/classes " +
                            "-Dsonar.host.url=http://localhost:9000 " +
                            "-Dsonar.login=${env.SONAR_TOKEN} " +
                            "-Dsonar.jacoco.reportPaths=target/jacoco.exec"
                    }
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    // Assume credentials is a single entry giving both username and password
                    def nexusCredentials = credentials('nexus-credentials')
                    sh """
                    mvn deploy:deploy-file \
                        -DgroupId=com.example \
                        -DartifactId=my-artifact \
                        -Dversion=1.0.0 \
                        -Dpackaging=jar \
                        -Dfile=Backend/target/DevOps_Project-1.0.jar \
                        -DrepositoryId=nexus \
                        -Durl=${NEXUS_URL} \
                        -Dusername=${nexusCredentials.username} \
                        -Dpassword=${nexusCredentials.password}
                    """
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                dir('Backend') {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ." // Build Docker image
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "echo '223JFT1730' | docker login -u 'nourbkh' --password-stdin" // Docker login
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}" // Push Docker image to Docker Hub
                }
            }
        }
    }

    post {
        always {
            script {
                sh 'docker rm -f mysql-test || true' // Cleanup MySQL container
            }
        }
        success {
            junit 'Backend/target/surefire-reports/*.xml' // Archive and display test results
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}
