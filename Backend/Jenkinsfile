pipeline {
    agent any

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_USERNAME = credentials('devops-pipeline') // Use credentials from Jenkins
        DOCKER_PASSWORD = credentials('devops-pipeline') // Use credentials from Jenkins
        IMAGE_NAME = 'nourbkh/devops-backend' // Docker Hub repository name
        IMAGE_TAG = 'nourbenkhairia-5arctic3-g4-devops' // Tag for the image
        SONAR_SCANNER_HOME = tool 'SonarQube' // Sonar Scanner tool configured in Jenkins
        SONAR_PROJECT_KEY = 'devops-backend' // Project key for SonarQube
    }

    stages {
        stage('Checkout') {
            steps {
                // Pull the code from the specified branch of your GitHub repository
                git branch: 'nourbenkhairia_5Arctic3_G4', 
                    url: 'https://github.com/devopsproject976/5ArcTIC_G4_devops.git', 
                    credentialsId: 'devops-pipeline' // Use the credentials ID you created
            }
        }

        stage('Start MySQL Container') {
            steps {
                script {
                    // Remove existing container if it exists
                    sh 'docker rm -f mysql-test || true'
                    
                    // Start a new MySQL container
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7'
                }
            }
        }

        stage('Build') {
            steps {
                // Change directory to Backend to run Maven commands
                dir('Backend') {
                    // Run Maven clean and package commands
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    // Run tests with Maven (JUnit and Mockito included)
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    dir('Backend') {
                        withSonarQubeEnv('SonarQube') { // Use the name of your SonarQube server configured in Jenkins
                            sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner " +
                                "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                                "-Dsonar.sources=src " +
                                "-Dsonar.java.binaries=target/classes " +
                                "-Dsonar.host.url=http://your-sonarqube-url " +
                                "-Dsonar.login=${env.SONAR_TOKEN}"
                        }
                    }
                }
            }
        }


        stage('Build Docker Image') {
            steps {
                script {
                    // Change directory to Backend
                    dir('Backend') {
                        // Build the Docker image using the specified tag format
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Login to Docker Hub
                    sh "echo '223JFT1730' | docker login -u 'nourbkh' --password-stdin"
                    // Push the Docker image to Docker Hub
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            script {
                // Cleanup - Stop and remove MySQL container
                sh 'docker rm -f mysql-test || true'
            }
        }
        success {
            // Archive and display test results
            junit 'Backend/target/surefire-reports/*.xml'
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}
