pipeline {
    agent any

    parameters {
            string(name: 'NEXUS_URL', defaultValue: 'localhost:8081', description: 'Nexus URL')
            string(name: 'NEXUS_REPOSITORY', defaultValue: 'maven-releases', description: 'Nexus Repository Name')
            string(name: 'SONARQUBE_URL', defaultValue: 'http://localhost:9000', description: 'SonarQube URL')
        }

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_USERNAME = credentials('devops-pipeline')
        DOCKER_PASSWORD = credentials('devops-pipeline')
        IMAGE_NAME = 'nourbkh/devops-backend'
        IMAGE_TAG = 'nourbenkhairia-5arctic3-g4-devops'
        SONAR_SCANNER_HOME = tool 'SonarQube Scanner' // Sonar Scanner tool configured in Jenkins
        SONAR_PROJECT_KEY = 'devops-backend' // Project key for SonarQube
        SONAR_TOKEN = credentials('sonarqube-token') // Ensure the ID matches your Jenkins credential
        NEXUS_CREDENTIALS = credentials('nexus-credentials')
        MAVEN_REPO_ID = 'nexus'
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'nourbenkhairia_5Arctic3_G4',
                    url: 'https://github.com/devopsproject976/5ArcTIC_G4_devops.git',
                    credentialsId: 'devops-pipeline'
            }
        }

        stage('Start MySQL Container') {
            steps {
                script {
                    sh 'docker rm -f mysql-test || true'
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7'
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    sh 'mvn test'
                }
            }
        }

        stage('JaCoCo Report') {
            steps {
                dir('Backend') {
                    sh 'mvn jacoco:report'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    dir('Backend') {
                        withSonarQubeEnv('SonarQube') {
                            sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner " +
                                "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                                "-Dsonar.sources=src " +
                                "-Dsonar.java.binaries=target/classes " +
                                "-Dsonar.host.url=${params.SONARQUBE_URL} " +
                                "-Dsonar.login=${env.SONAR_TOKEN} " +
                                "-Dsonar.jacoco.reportPaths=target/jacoco.exec"
                        }
                    }
                }
            }
        }

        /*stage('Publish to Nexus') {
            steps {
                dir('Backend') {
                    script {
                        // Define artifact details based on the known pom.xml values
                                def groupId = "tn.esprit"
                                def artifactId = "5ArcTIC3-G4-devopss"
                                def version = "1.0"
                                def packaging = "jar"  // Based on your project packaging
                                def artifactPath = "target/5ArcTIC3-G4-devopss-1.0.jar"
                                def pomFile = "pom.xml"

                        // Check if the artifact exists
                        if (fileExists(artifactPath)) {
                            echo "*** File: ${artifactPath}, group: ${groupId}, packaging: ${packaging}, version ${version}"

                            // Upload artifact and POM to Nexus
                            nexusArtifactUploader(
                                nexusVersion: NEXUS_VERSION,
                                protocol: NEXUS_PROTOCOL,
                                nexusUrl: params.NEXUS_URL,
                                groupId: groupId,
                                artifactId: artifactId,
                                version: version,
                                repository: params.NEXUS_REPOSITORY,
                                credentialsId: 'nexus-credentials',
                                artifacts: [
                                    [artifactId: artifactId, classifier: '', file: artifactPath, type: packaging],
                                    [artifactId: artifactId, classifier: '', file: pomFile, type: "pom"]
                                ]
                            )
                        } else {
                            error "*** File could not be found or does not exist at ${artifactPath}."
                        }
                    }
                }
            }
        }*/



        stage('Build Docker Image') {
            steps {
                script {
                    dir('Backend') {
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'devops-pipeline', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker push ${IMAGE_NAME}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

}

    post {
        always {
            script {
                sh 'docker rm -f mysql-test || true'
            }
        }
        success {
            junit 'Backend/target/surefire-reports/*.xml'
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}