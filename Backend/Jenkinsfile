pipeline {
    agent any

    environment {
        DB_URL = 'jdbc:mysql://localhost:3306/devops'
        DB_USER = 'root'
        DB_PASSWORD = '' // Update with your actual password
        DOCKER_USERNAME = credentials('devops-pipeline')
        DOCKER_PASSWORD = credentials('devops-pipeline')
        IMAGE_NAME = 'nourbkh/devops-backend'
        IMAGE_TAG = 'nourbenkhairia-5arctic3-g4-devops'
        SONAR_SCANNER_HOME = tool 'SonarQube Scanner'
        SONAR_PROJECT_KEY = 'devops-backend'
        SONAR_TOKEN = credentials('sonarqube-token')
        NEXUS_URL = 'http://localhost:8081/repository/maven-releases/' // Adjust URL
        NEXUS_CREDENTIALS = credentials('nexus-credentials')
        MAVEN_REPO_ID = 'nexus'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'nourbenkhairia_5Arctic3_G4',
                    url: 'https://github.com/devopsproject976/5ArcTIC_G4_devops.git',
                    credentialsId: 'devops-pipeline'
            }
        }

        stage('Start MySQL Container') {
            steps {
                script {
                    sh 'docker rm -f mysql-test || true'
                    sh 'docker run -d --name mysql-test -e MYSQL_ALLOW_EMPTY_PASSWORD=true -e MYSQL_DATABASE=test_db -p 3306:3306 mysql:5.7'
                }
            }
        }

        stage('Build') {
            steps {
                dir('Backend') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Test') {
            steps {
                dir('Backend') {
                    sh 'mvn test'
                }
            }
        }

        stage('JaCoCo Report') {
            steps {
                dir('Backend') {
                    sh 'mvn jacoco:report'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    dir('Backend') {
                        withSonarQubeEnv('SonarQube') {
                            sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner " +
                                "-Dsonar.projectKey=${SONAR_PROJECT_KEY} " +
                                "-Dsonar.sources=src " +
                                "-Dsonar.java.binaries=target/classes " +
                                "-Dsonar.host.url=http://localhost:9000 " +
                                "-Dsonar.login=${env.SONAR_TOKEN} " +
                                "-Dsonar.jacoco.reportPaths=target/jacoco.exec"
                        }
                    }
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USERNAME', passwordVariable: 'NEXUS_PASSWORD')]) {
                        // Check the Nexus URL and credentials before deploying
                        sh """
                        mvn deploy:deploy-file \
                            -DgroupId=tn.esprit \
                            -DartifactId=DevOps_Project \
                            -Dversion=1.0 \
                            -Dpackaging=jar \
                            -Dfile=Backend/target/DevOps_Project-1.0.jar \
                            -DrepositoryId=${MAVEN_REPO_ID} \
                            -Durl=${NEXUS_URL} \
                            -Dusername=${NEXUS_USERNAME} \
                            -Dpassword=${NEXUS_PASSWORD}
                        """
                    }
                }
            }
        }

        /* Uncomment if Docker image building and pushing are needed
        stage('Build Docker Image') {
            steps {
                script {
                    dir('Backend') {
                        sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "echo '${DOCKER_PASSWORD}' | docker login -u '${DOCKER_USERNAME}' --password-stdin"
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        */

    }

    post {
        always {
            script {
                sh 'docker rm -f mysql-test || true'
            }
        }
        success {
            junit 'Backend/target/surefire-reports/*.xml'
            echo 'Build and tests succeeded!'
        }
        failure {
            echo 'Build or test failed.'
        }
    }
}
